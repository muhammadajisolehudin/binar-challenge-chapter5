{"ast":null,"code":"import { animateStyle } from './animate-style.es.js';\nimport { getOptions } from './utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { withControls } from './utils/controls.es.js';\nimport { resolveOption } from '../utils/stagger.es.js';\nfunction animate(elements, keyframes, options = {}) {\n  elements = resolveElements(elements);\n  const numElements = elements.length;\n  /**\r\n   * Create and start new animations\r\n   */\n  const animationFactories = [];\n  for (let i = 0; i < numElements; i++) {\n    const element = elements[i];\n    for (const key in keyframes) {\n      const valueOptions = getOptions(options, key);\n      valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);\n      const animation = animateStyle(element, key, keyframes[key], valueOptions);\n      animationFactories.push(animation);\n    }\n  }\n  return withControls(animationFactories, options,\n  /**\r\n   * TODO:\r\n   * If easing is set to spring or glide, duration will be dynamically\r\n   * generated. Ideally we would dynamically generate this from\r\n   * animation.effect.getComputedTiming().duration but this isn't\r\n   * supported in iOS13 or our number polyfill. Perhaps it's possible\r\n   * to Proxy animations returned from animateStyle that has duration\r\n   * as a getter.\r\n   */\n  options.duration);\n}\nexport { animate };","map":{"version":3,"names":["animateStyle","getOptions","resolveElements","withControls","resolveOption","animate","elements","keyframes","options","numElements","length","animationFactories","i","element","key","valueOptions","delay","animation","push","duration"],"sources":["C:/Users/User/binar-challenge-chapter5/node_modules/@motionone/dom/dist/animate/index.es.js"],"sourcesContent":["import { animateStyle } from './animate-style.es.js';\r\nimport { getOptions } from './utils/options.es.js';\r\nimport { resolveElements } from '../utils/resolve-elements.es.js';\r\nimport { withControls } from './utils/controls.es.js';\r\nimport { resolveOption } from '../utils/stagger.es.js';\r\n\r\nfunction animate(elements, keyframes, options = {}) {\r\n    elements = resolveElements(elements);\r\n    const numElements = elements.length;\r\n    /**\r\n     * Create and start new animations\r\n     */\r\n    const animationFactories = [];\r\n    for (let i = 0; i < numElements; i++) {\r\n        const element = elements[i];\r\n        for (const key in keyframes) {\r\n            const valueOptions = getOptions(options, key);\r\n            valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);\r\n            const animation = animateStyle(element, key, keyframes[key], valueOptions);\r\n            animationFactories.push(animation);\r\n        }\r\n    }\r\n    return withControls(animationFactories, options, \r\n    /**\r\n     * TODO:\r\n     * If easing is set to spring or glide, duration will be dynamically\r\n     * generated. Ideally we would dynamically generate this from\r\n     * animation.effect.getComputedTiming().duration but this isn't\r\n     * supported in iOS13 or our number polyfill. Perhaps it's possible\r\n     * to Proxy animations returned from animateStyle that has duration\r\n     * as a getter.\r\n     */\r\n    options.duration);\r\n}\r\n\r\nexport { animate };\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AACpD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,aAAa,QAAQ,wBAAwB;AAEtD,SAASC,OAAOA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAChDF,QAAQ,GAAGJ,eAAe,CAACI,QAAQ,CAAC;EACpC,MAAMG,WAAW,GAAGH,QAAQ,CAACI,MAAM;EACnC;AACJ;AACA;EACI,MAAMC,kBAAkB,GAAG,EAAE;EAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;IAClC,MAAMC,OAAO,GAAGP,QAAQ,CAACM,CAAC,CAAC;IAC3B,KAAK,MAAME,GAAG,IAAIP,SAAS,EAAE;MACzB,MAAMQ,YAAY,GAAGd,UAAU,CAACO,OAAO,EAAEM,GAAG,CAAC;MAC7CC,YAAY,CAACC,KAAK,GAAGZ,aAAa,CAACW,YAAY,CAACC,KAAK,EAAEJ,CAAC,EAAEH,WAAW,CAAC;MACtE,MAAMQ,SAAS,GAAGjB,YAAY,CAACa,OAAO,EAAEC,GAAG,EAAEP,SAAS,CAACO,GAAG,CAAC,EAAEC,YAAY,CAAC;MAC1EJ,kBAAkB,CAACO,IAAI,CAACD,SAAS,CAAC;IACtC;EACJ;EACA,OAAOd,YAAY,CAACQ,kBAAkB,EAAEH,OAAO;EAC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIA,OAAO,CAACW,QAAQ,CAAC;AACrB;AAEA,SAASd,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}